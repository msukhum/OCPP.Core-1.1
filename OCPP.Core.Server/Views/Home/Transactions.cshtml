
@using OCPP.Core.Database
@model TransactionListViewModel

@{ ViewData["Title"] = "Management"; }
<br />
@{ string timespan = (Model.Timespan == 2) ? "?t=2" : ((Model.Timespan == 3) ? "?t=3" : string.Empty);

    List<ConnectorStatusViewModel> connectorStatusViewModels = new List<ConnectorStatusViewModel>();

    // Copy CP-Names in dictionary for name resolution and
    Dictionary<string, string> chargePointNames = new Dictionary<string, string>();
    if (Model.ChargePoints != null)
    {
        foreach (ChargePoint cp in Model.ChargePoints)
        {
            chargePointNames.Add(cp.ChargePointId, cp.Name);
        }
    }


    // Count connectors for every charge point (=> naming scheme)
    Dictionary<string, int> dictConnectorCount = new Dictionary<string, int>();
    string currentConnectorName = string.Empty;
    foreach (ConnectorStatus cs in Model.ConnectorStatuses)
    {
        if (dictConnectorCount.ContainsKey(cs.ChargePointId))
        {
            // > 1 connector
            dictConnectorCount[cs.ChargePointId] = dictConnectorCount[cs.ChargePointId] + 1;
        }
        else
        {
            // first connector
            dictConnectorCount.Add(cs.ChargePointId, 1);
        }

        ConnectorStatusViewModel csvm = new ConnectorStatusViewModel();
        csvm.ChargePointId = cs.ChargePointId;
        csvm.ConnectorId = cs.ConnectorId;

        string connectorName = cs.ConnectorName;
        if (string.IsNullOrEmpty(connectorName))
        {
            // Default: use charge point name
            chargePointNames.TryGetValue(cs.ChargePointId, out connectorName);
            if (string.IsNullOrEmpty(connectorName))
            {
                // Fallback: use charge point ID
                connectorName = cs.ChargePointId;
            }
            connectorName = $"{connectorName}:{cs.ConnectorId}";
        }
        csvm.ConnectorName = connectorName;
        connectorStatusViewModels.Add(csvm);

        if (cs.ChargePointId == Model.CurrentChargePointId && cs.ConnectorId == Model.CurrentConnectorId)
        {
            currentConnectorName = connectorName;
        }
    } }

<style>
    .card-body {
        padding: 0.75rem;
    }

    .successTextColor {
        color: seagreen;
    }

    .errorTextColor {
        color: orangered;
    }

    .font-weight-bold {
        color: #5c6268 !important;
    }

    .shadow-lg {
        box-shadow: 0 0.5rem 1rem rgba(0,0,0,.175) !important;
    }

    .btn-font-weight-bold {
        font-weight: 700 !important;
    }

    .disabled {
        color: #b8babd !important;
    }

    .row {
        justify-content: center;
    }
</style>
<div class="row">
    <div class="col-lg-12">
        <div class="page-title-box">
            <div class="row align-items-center">
                <div class="col-md-10">
                    <h4 class="page-title mb-0">Transactions</h4>
                </div>
            </div>
        </div>
    </div>
</div> <!-- end row -->
<div class="row align-items-center">
    <div class="col-md-10 card border-1 shadow-none rounded">
        <div class="card-header">Charge point: @Model.CurrentChargePointId</div>
        <div class="card-body">
            <div class="row align-items-center" style="justify-content: flex-start;">
                <div class="col-md-1">
                    Connector:
                </div>
                <div class="col-md-1">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="ddbChargePoint" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @currentConnectorName
                        </button>
                        <div class="dropdown-menu" aria-labelledby="ddbChargePoint">
                            @foreach (ConnectorStatusViewModel csvm in connectorStatusViewModels)
                            {
                <a class="dropdown-item" href="~/Home/Transactions/@Uri.EscapeDataString(csvm.ChargePointId)/@csvm.ConnectorId@timespan">@csvm.ConnectorName</a>}
                        </div>
                    </div>
                </div>
                <div class="col-1">
                </div>
                <div class="col-md-1">
                    Interval:
                </div>
                <div class="col-md-1">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="ddbTimespan" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @if (Model.Timespan == 2)
                            {@("90 Days");
                            }
                            else if (Model.Timespan == 3)
                            { @("1 Years");
                            }
                            else
                            { @("30 Days");
                            }
                        </button>
                        <div class="dropdown-menu" aria-labelledby="ddbTimespan">
                            <a class="dropdown-item" href="~/Home/Transactions/@Uri.EscapeDataString(Model.CurrentChargePointId)/@Model.CurrentConnectorId">30 Days</a>
                            <a class="dropdown-item" href="~/Home/Transactions/@Uri.EscapeDataString(Model.CurrentChargePointId)/@Model.CurrentConnectorId?t=2">90 Days</a>
                            <a class="dropdown-item" href="~/Home/Transactions/@Uri.EscapeDataString(Model.CurrentChargePointId)/@Model.CurrentConnectorId?t=3">1 Years</a>
                        </div>
                    </div>
                </div>
                <div class="col-1">
                </div>
                <div class="col-md-auto">
                    <a href="~/Home/Export/@Uri.EscapeDataString(Model.CurrentChargePointId)/@Model.CurrentConnectorId@timespan" data-toggle="tooltip" data-placement="top" title="Download as CSV">
                        <i class="fas fa-file-csv fa-2x"></i>
                    </a>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-12 card border-1 shadow-none rounded">
                    @if (Model != null)
                    {
        <table id="dtTransactions" class="table table-striped table-bordered table-sm" cellspacing="0" width="100%">
            <thead>
                <tr>
                    <th class="th-sm">Transaction ID</th>
                    <th class="th-sm">Connector</th>
                    <th class="th-sm">StartTime</th>
                    <th class="th-sm">StartTag</th>
                    <th class="th-sm">StartMeter</th>
                    <th class="th-sm">StopTime</th>
                    <th class="th-sm">StopTag</th>
                    <th class="th-sm">StopMeter</th>
                    <th class="th-sm">ChargeSum</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Transactions != null)
                {
                    foreach (Transaction t in Model.Transactions.OrderByDescending(x => x.TransactionId).ToList())
                    {
                        string startTag = t.StartTagId;
                        string stopTag = t.StopTagId;
                        if (!string.IsNullOrEmpty(t.StartTagId) && Model.ChargeTags != null && Model.ChargeTags.ContainsKey(t.StartTagId))
                        {
                            startTag = Model.ChargeTags[t.StartTagId]?.TagName;
                        }
                        if (!string.IsNullOrEmpty(t.StopTagId) && Model.ChargeTags != null && Model.ChargeTags.ContainsKey(t.StopTagId))
                        {
                            stopTag = Model.ChargeTags[t.StopTagId]?.TagName;
                        }
        <tr>
            <td>@t.TransactionId</td>
            <td>@currentConnectorName</td>
            <td>@string.Format("{0} {1}", t.StartTime.ToShortDateString(), t.StartTime.ToShortTimeString())</td>
            <td>@startTag</td>
            <td>@string.Format("{0:0.0##}", t.MeterStart)</td>
            <td>@((t.StopTime != null) ? string.Format("{0} {1}", t.StopTime.Value.ToShortDateString(), t.StopTime.Value.ToShortTimeString()) : string.Empty)</td>
            <td>@stopTag</td>
            <td>@((t.MeterStop != null) ? string.Format("{0:0.0##}", t.MeterStop) : string.Empty)</td>
            <td>@((t.MeterStop != null) ? string.Format("{0:0.0##}", (t.MeterStop - t.MeterStart)) : string.Empty)</td>
        </tr>
}
}
            </tbody>
        </table>}
                </div>
            </div>
        </div>
    </div>
</div>

